// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace TechMania_Server.Pages.SmartPhone
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\dhalusek\source\repos\TechMania\TechMania_Server\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\dhalusek\source\repos\TechMania\TechMania_Server\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\dhalusek\source\repos\TechMania\TechMania_Server\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\dhalusek\source\repos\TechMania\TechMania_Server\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\dhalusek\source\repos\TechMania\TechMania_Server\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\dhalusek\source\repos\TechMania\TechMania_Server\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\dhalusek\source\repos\TechMania\TechMania_Server\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\dhalusek\source\repos\TechMania\TechMania_Server\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\dhalusek\source\repos\TechMania\TechMania_Server\_Imports.razor"
using TechMania_Server;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\dhalusek\source\repos\TechMania\TechMania_Server\_Imports.razor"
using TechMania_Server.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\dhalusek\source\repos\TechMania\TechMania_Server\_Imports.razor"
using TechMania_Server.Pages.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\dhalusek\source\repos\TechMania\TechMania_Server\_Imports.razor"
using TechMania_Server.Helper;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\dhalusek\source\repos\TechMania\TechMania_Server\_Imports.razor"
using Blazored.TextEditor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\dhalusek\source\repos\TechMania\TechMania_Server\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\dhalusek\source\repos\TechMania\TechMania_Server\Pages\SmartPhone\SmartPhoneUpsert.razor"
using Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\dhalusek\source\repos\TechMania\TechMania_Server\Pages\SmartPhone\SmartPhoneUpsert.razor"
using Business.Repository.IRepository;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\dhalusek\source\repos\TechMania\TechMania_Server\Pages\SmartPhone\SmartPhoneUpsert.razor"
using TechMania_Server.Service.IService;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/smart-phone/create")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/smart-phone/edit/{Id:int}")]
    public partial class SmartPhoneUpsert : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 112 "C:\Users\dhalusek\source\repos\TechMania\TechMania_Server\Pages\SmartPhone\SmartPhoneUpsert.razor"
       
    [Parameter]
    public int? Id { get; set; }
    private SmartPhoneDTO SmartPhoneModel { get; set; } = new SmartPhoneDTO();
    private string Title { get; set; } = "Create";
    private SmartPhoneImageDTO PhoneImage { get; set; } = new SmartPhoneImageDTO();
    private List<string> DeletedImageNames { get; set; } = new List<string>();
    public BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    private bool IsImageUploadProcessStarted { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationState;

        if (!authenticationState.User.IsInRole(Common.SD.Role_Admin))
        {
            var uri = new Uri(NavigationManager.Uri);
            NavigationManager.NavigateTo($"identity/account/login?returnUrl={uri.LocalPath}");
        }

        if (Id != null)
        {
            //updating
            Title = "Update";
            SmartPhoneModel = await SmartPhoneRepository.GetSmartPhone(Id.Value);
            if (SmartPhoneModel.SmartPhoneImages != null)
            {
                SmartPhoneModel.ImageUrls = SmartPhoneModel.SmartPhoneImages.Select(U => U.PhoneImageUrl).ToList();
            }
            SetHTML();
        }
        else
        {
            //create
            SmartPhoneModel = new SmartPhoneDTO();
        }
    }

    private async Task HandleSmartPhoneUpsert()
    {
        try
        {
            if (Title == "Create")
            {
                var phoneDetailsByName = await SmartPhoneRepository.IsPhoneUnique(SmartPhoneModel.Name, SmartPhoneModel.Id);
                if (phoneDetailsByName != null)
                {
                    //duplicates
                    await JsRuntime.ToastrError("Phone name already exists.");
                    return;
                }
            }

            if (SmartPhoneModel.Id != 0 && Title == "Update")
            {
                //update
                var updatePhoneResult = await SmartPhoneRepository.UpdateSmartPhone(SmartPhoneModel.Id, SmartPhoneModel);
                if ((SmartPhoneModel.ImageUrls != null && SmartPhoneModel.ImageUrls.Any())
                    || (DeletedImageNames != null && DeletedImageNames.Any())
                    )
                {
                    if (DeletedImageNames != null && DeletedImageNames.Any())
                    {
                        foreach (var deletedImageName in DeletedImageNames)
                        {
                            var imageName = deletedImageName.Replace($"PhoneImages/", "");
                            var result = FileUpload.DeleteFile(imageName);
                            await SmartPhoneImagesRepository.DeleteSmartPhoneImageByImageUrl(deletedImageName);
                        }
                    }




                    await AddSmartPhoneImage(updatePhoneResult);
                }
                await JsRuntime.ToastrSuccess("SmartPhone updated successfully.");
            }
            else
            {
                //create
                //SmartPhoneModel.Details = await QuillHtml.GetHTML();
                var createdResult = await SmartPhoneRepository.CreateSmartPhone(SmartPhoneModel);
                await AddSmartPhoneImage(createdResult);
                await JsRuntime.ToastrSuccess("SmartPhone created successfully.");
            }
        }
        catch (Exception ex)
        {
            //log exceptions
            return;
        }

        NavigationManager.NavigateTo("/smart-phone");
    }

    public async void SetHTML()
    {
        if (string.IsNullOrEmpty(SmartPhoneModel.Details))
        {
            await this.QuillHtml.LoadHTMLContent(SmartPhoneModel.Details);
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsImageUploadProcessStarted = true;
        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                       fileInfo.Extension.ToLower() == ".png" ||
                       fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        var uploadedImagePath = await FileUpload.UploadFile(file);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        await JsRuntime.ToastrError("Please select .jpg/ .jpeg/ .png file only");
                        return;
                    }
                }
                if (images.Any())
                {
                    if (SmartPhoneModel.ImageUrls != null && SmartPhoneModel.ImageUrls.Any())
                    {
                        SmartPhoneModel.ImageUrls.AddRange(images);
                    }
                    else
                    {
                        SmartPhoneModel.ImageUrls = new List<string>();
                        SmartPhoneModel.ImageUrls.AddRange(images);
                    }
                }
                else
                {
                    await JsRuntime.ToastrError("Image upload failed");
                    return;
                }
            }
            IsImageUploadProcessStarted = false;
        }
        catch (Exception ex)
        {
            await JsRuntime.ToastrError(ex.Message);
            throw ex;
        }
    }

    private async Task AddSmartPhoneImage(SmartPhoneDTO phoneDetails)
    {
        foreach (var imageUrl in SmartPhoneModel.ImageUrls)
        {
            if (SmartPhoneModel.SmartPhoneImages == null || SmartPhoneModel.SmartPhoneImages.Where(x => x.PhoneImageUrl == imageUrl).Count() == 0)
            {
                PhoneImage = new SmartPhoneImageDTO()
                {
                    PhoneId = phoneDetails.Id,
                    PhoneImageUrl = imageUrl
                };
                await SmartPhoneImagesRepository.CreateSmartPhoneImage(PhoneImage);
            }
        }
    }

    internal async Task DeletePhoto(string imageUrl)
    {
        try
        {
            var imageIndex = SmartPhoneModel.ImageUrls.FindIndex(x => x == imageUrl);
            var imageName = imageUrl.Replace($"PhoneImages/", "");
            if (SmartPhoneModel.Id == 0 && Title == "Create")
            {
                var result = FileUpload.DeleteFile(imageName);
            }
            else
            {
                //update
                DeletedImageNames ??= new List<string>();
                DeletedImageNames.Add(imageUrl);
            }
            SmartPhoneModel.ImageUrls.RemoveAt(imageIndex);
        }
        catch (Exception ex)
        {
            await JsRuntime.ToastrError(ex.Message);
        }

    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IFileUpload FileUpload { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISmartPhoneImagesRepository SmartPhoneImagesRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISmartPhoneRepository SmartPhoneRepository { get; set; }
    }
}
#pragma warning restore 1591
