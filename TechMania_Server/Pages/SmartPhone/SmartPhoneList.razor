@page "/smart-phone"
@using Models
@using Business.Repository.IRepository
@using Radzen
@inject ISmartPhoneRepository SmartPhoneRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject TechMania_Server.Service.IService.IFileUpload FileUpload
@attribute [Authorize(Roles = Common.SD.Role_Admin)]

    <div class="row mt-4">
        <div class="col-8">
            <h4 class="card-title text-info">SmartPhone products</h4>
        </div>
        <div class="col-3 offset-1">
            <NavLink href="smart-phone/create" class="btn btn-info form-control">Add to Store</NavLink>
        </div>
    </div>
    <br />

    <RadzenDataGrid AllowFiltering="true"
                AllowColumnResize="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                FilterMode="FilterMode.Advanced"
                PageSize="15" AllowPaging="true" AllowSorting="true"
                Data="@SmartPhones" TItem="SmartPhoneDTO" ColumnWidth="300px"
                LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>
        <RadzenDataGridColumn TItem="SmartPhoneDTO" Property="Name" Filterable="false" Title="Model name" Frozen="true" Width="100px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="SmartPhoneDTO" Property="Price" Filterable="false" Title="Phone Price" Frozen="true" Width="100px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="SmartPhoneDTO" Property="Manufacturer" Filterable="false" Title="Manufacturer" Frozen="true" Width="100px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="SmartPhoneDTO" Property="CreatedDate" Filterable="false" Title="Added to store" Frozen="true" Width="100px" TextAlign="TextAlign.Center">

            <Template Context="data">
                @String.Format("{0:d}", data.CreatedDate)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="SmartPhoneDTO" Property="UpdatedDate" Filterable="false" Title="Last update" Frozen="true" Width="100px" TextAlign="TextAlign.Center">

            <Template Context="data">
                @String.Format("{0:d}", data.UpdatedDate)
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="SmartPhoneDTO" Property="Id" Title="" Width="30px">
            <Template Context="data">
                <NavLink href="@($"/smart-phone/edit/{data.Id}")"><i class="fas fa-edit fa-lg"></i></NavLink>
                <NavLink @onclick="()=>HandleDelete(data.Id)"><i class="fas fa-trash-alt"></i></NavLink>
            </Template>
        </RadzenDataGridColumn>

    </Columns>
    </RadzenDataGrid>

    <DeleteConfirmation IsParentComponentProcessing="IsProcessing" ConfirmationChanged="ConfirmDelete_Click"></DeleteConfirmation>

    @code {

        private List<SmartPhoneDTO> SmartPhones { get; set; } = new List<SmartPhoneDTO>();
        private int? DeleteAdditionId { get; set; } = null;
        private bool IsDeleteProcessComplete { get; set; } = false;
        private bool IsProcessing { get; set; } = false;

        protected override async Task OnInitializedAsync()
        {
            SmartPhones = await SmartPhoneRepository.GetAllSmartPhone();
            SmartPhones = SmartPhones.OrderByDescending(x => x.Id).ToList();
        }

        private async Task HandleDelete(int phoneId)
        {
            DeleteAdditionId = phoneId;
            IsDeleteProcessComplete = false;
            await JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
        }

        public async Task ConfirmDelete_Click(bool isConfirmed)
        {
            IsProcessing = true;
            if (isConfirmed && DeleteAdditionId != null)
            {
                SmartPhoneDTO smartPhone = await SmartPhoneRepository.GetSmartPhone(DeleteAdditionId.Value);
                foreach (var image in smartPhone.SmartPhoneImages)
                {
                    var imageName = image.PhoneImageUrl.Replace($"PhoneImages/", "");
                    FileUpload.DeleteFile(imageName);
                }

                await SmartPhoneRepository.DeleteSmartPhone(DeleteAdditionId.Value);
                await JsRuntime.ToastrSuccess("SmartPhone Deleted successfully");
                SmartPhones = await SmartPhoneRepository.GetAllSmartPhone();
            }
            await JsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
            IsProcessing = false;
        }
    }
